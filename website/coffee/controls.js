// Generated by CoffeeScript 2.5.1
(function() {
  var TurntableControls;

  TurntableControls = class TurntableControls {
    constructor(object, target, domElement, idleMove, setVolatile) {
      this.mousedown = this.mousedown.bind(this);
      this.mousemove = this.mousemove.bind(this);
      this.mouseup = this.mouseup.bind(this);
      this.mousewheel = this.mousewheel.bind(this);
      this.object = object;
      this.target = target;
      this.domElement = domElement;
      this.idleMove = idleMove;
      this.setVolatile = setVolatile;
      if (this.domElement === void 0) {
        this.domElement = document;
      }
      this.distance = 50;
      this.bearing = 0;
      this.angle = 45;
      this.bearingSpeed = 0.01;
      this.angleSpeed = 0.01;
      this.zoomSpeed = -20;
      this.flipyz = false;
      this.domElement.addEventListener('mousemove', this.mousemove, false);
      this.domElement.addEventListener('mousedown', this.mousedown, false);
      this.domElement.addEventListener('mouseup', this.mouseup, false);
      this.domElement.addEventListener('touchmove', this.mousemove, false);
      this.domElement.addEventListener('touchstart', this.mousedown, false);
      this.domElement.addEventListener('touchend', this.mouseup, false);
      this.domElement.addEventListener('touchcancel', this.mouseup, false);
      jQuery(this.domElement).mousewheel(this.mousewheel);
    }

    // Called every frame
    update(delta) {
      return this.setCamera();
    }

    // Places the camera in the correct location
    setCamera() {
      var horizontal, position;
      // Work out the horizontal location from the bearing
      horizontal = new THREE.Vector3(Math.sin(this.bearing), 0, -Math.cos(this.bearing));
      // And the vertical location and distance from centre
      position = horizontal.normalize().multiplyScalar(Math.cos(this.angle));
      position.y = Math.sin(this.angle);
      position = position.multiplyScalar(this.distance).addSelf(this.target);
      this.object.position = position;
      return this.object.lookAt(this.target);
    }

    mousedown(event) {
      event.preventDefault();
      event.stopPropagation();
      if (event.targetTouches != null) {
        this.startX = event.targetTouches[0].pageX;
        this.startY = event.targetTouches[0].pageY;
      } else {
        this.startX = event.clientX;
        this.startY = event.clientY;
      }
      this.startBearing = this.bearing;
      return this.startAngle = this.angle;
    }

    mousemove(event) {
      var x, y;
      if (this.startX && this.startY) {
        if (event.targetTouches != null) {
          x = event.targetTouches[0].pageX;
          y = event.targetTouches[0].pageY;
        } else {
          x = event.clientX;
          y = event.clientY;
        }
        this.bearing = this.startBearing + (x - this.startX) * this.bearingSpeed;
        this.angle = Math.max(Math.min(this.startAngle + (y - this.startY) * this.angleSpeed, Math.PI / 2), -Math.PI / 2);
        return this.setVolatile();
      } else if (this.idleMove != null) {
        return this.idleMove(event);
      }
    }

    mouseup(event) {
      event.preventDefault();
      event.stopPropagation();
      this.startX = void 0;
      this.startY = void 0;
      this.startBearing = void 0;
      return this.startAngle = void 0;
    }

    mousewheel(event, delta) {
      event.preventDefault();
      event.stopPropagation();
      this.distance = Math.min(Math.max(this.distance + (delta * this.zoomSpeed), 50), 500);
      return this.setVolatile();
    }

  };

}).call(this);
